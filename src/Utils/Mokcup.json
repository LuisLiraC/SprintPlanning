[
    {
        "sprintId": 1,
        "content": [
            {
                "id": "D01",
                "description": "Definir tecnologías",
                "tasks": [
                    {
                        "id": 1,
                        "description": "Revisión de lenguajes / frameworks para frontend según las necesidades planteadas",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "id": 2,
                        "description": "Revisión de lenguajes / frameworks para backend según las necesidades planteadas.",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "id": 3,
                        "description": "Revisión de bases de datos (Sql o NoSql) según las necesidades y plataformas para despliegue.",
                        "inCharge": "Luis Lira"
                    }
                ],
                "comments": [
                    "Se buscará información sobre las tecnologías que permitan la creación ágil de la API"
                ],
                "conditions": []
            },
            {
                "id": "D02",
                "description": "Diseño de datos",
                "tasks": [
                    {
                        "id": 4,
                        "description": "Definición de estructura de datos según la información disponible en el sitio oficial (Formato de los objetos JSON)",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "id": 5,
                        "description": "Creación de archivo JSON con el formato y los campos qué contendrá que ya fueron definidos.",
                        "inCharge": "Luis Lira"
                    }
                ],
                "comments": [
                    "Se definirá de qué manera se organizará el formato JSON para la información de cada elemento de la BDD."
                ],
                "conditions": []
            },
            {
                "id": "D03",
                "description": "Creación de servidor",
                "tasks": [
                    {
                        "backlogId": "D03",
                        "id": 6,
                        "description": "Inicializar el proyecto con las dependencias necesarias",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "D03",
                        "id": 7,
                        "description": "Crear el archivo que corre el servidor",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "D03",
                        "id": 8,
                        "description": "Preparar la configuración de variables de entorno",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "D03",
                        "id": 9,
                        "description": "Verificar que el servidor esté escuchando correctamente en el puerto indicado con la variable de entorno.",
                        "inCharge": "Luis Lira"
                    }
                ],
                "comments": [
                    "Se levantará en local el servidor y se probará que funcione correctamente."
                ],
                "conditions": []
            },
            {
                "id": "D04",
                "description": "Creación Mockup base",
                "tasks": [
                    {
                        "backlogId": "D04",
                        "id": 10,
                        "description": "Crear JSON con la estructura requerida y captura la información de al menos 3 campeones",
                        "inCharge": "Luis Lira"
                    }
                ],
                "comments": [
                    "Se creará un archivo JSON con el formato definido de datos para trabajar durante el desarrollo."
                ],
                "conditions": []
            },
            {
                "id": "D05",
                "description": "Creación de Base de datos en el servidor local",
                "tasks": [
                    {
                        "backlogId": "D05",
                        "id": 11,
                        "description": "Instalación de Base de datos",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "D05",
                        "id": 12,
                        "description": "Generación de la cadena de conexión para que sea puesta como variable de entorno.",
                        "inCharge": "Luis Lira"
                    }
                ],
                "comments": [
                    "Se creará la instancia de la base de datos, así como determinar la cadena de conexión a la misma."
                ],
                "conditions": []
            },
            {
                "id": "D06",
                "description": "Recopilación de datos",
                "tasks": [
                    {
                        "backlogId": "D06",
                        "id": 13,
                        "description": "Creación de archivo JSON donde contenga la información de los campeones",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "D06",
                        "id": 14,
                        "description": "Revisión de que la información sea correcta",
                        "inCharge": "Luis Lira"
                    }
                ],
                "comments": [
                    "Se creará un archivo con un Arreglo de objetos en JSON para recopilar la información."
                ],
                "conditions": []
            },
            {
                "id": "HU01",
                "description": "Creación de petición HTTP GET (all)",
                "tasks": [
                    {
                        "backlogId": "HU01",
                        "id": 15,
                        "description": "Creación de endpoint para recibir petición GET (Todos)",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "HU01",
                        "id": 16,
                        "description": "Verificar funcionamiento de endpoint con Postman",
                        "inCharge": "Luis Lira"
                    }
                ],
                "comments": [
                    "Los usuarios podrán obtener toda la información de la Tabla/Colección campeones."
                ],
                "conditions": [
                    "La información de cada campeón debe estar en formato JSON",
                    "Todos los objetos deben venir en un arreglo",
                    "En caso de error, debe regresar un objeto con el código y mensaje de error",
                    "La API debe permitir la petición desde un dominio y desde localhost",
                    "El endpoint debe comenzar desde “api/”",
                    "El endpoint debe tener el nombre de tabla/colección de la base de datos, por ejemplo “api/champions”",
                    "Por medio de los parámetros de búsqueda se debe poder hacer filtro por región y/o rol",
                    "Por medio de los parámetros de búsqueda se debe poder hacer limitación de resultados devueltos"
                ]
            },
            {
                "id": "HU02",
                "description": "Creación de petición HTTP GET (one)",
                "tasks": [
                    {
                        "backlogId": "HU02",
                        "id": 17,
                        "description": "Creación de endpoint para recibir petición GET (Sólo uno)",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "HU02",
                        "id": 18,
                        "description": "Verificar funcionamiento de endpoint con Postman",
                        "inCharge": "Luis Lira"
                    }
                ],
                "comments": [
                    "Los usuarios podrán obtener sólo los datos de un solo campeón de la Tabla/Colección campeones"
                ],
                "conditions": [
                    "La información debe estar en formato JSON",
                    "En caso de error, debe regresar un objeto con el código y mensaje de error",
                    "La API debe permitir la petición desde un dominio y desde localhost",
                    "El endpoint debe comenzar desde “api/campeones/[nombre del campeón]”",
                    "El endpoint para cada campeón debe ser con su nombre"
                ]
            }
        ]
    },
    {
        "sprintId": 2,
        "content": [
            {
                "id": "HU03",
                "description": "Simular petición HTTP PUT hacia la API",
                "tasks": [
                    {
                        "backlogId": "HU03",
                        "id": 19,
                        "description": "Creación de endpoint para recibir petición PUT",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "HU03",
                        "id": 20,
                        "description": "Verificar funcionamiento de endpoint con Postman",
                        "inCharge": "Luis Lira"
                    }
                ],
                "comments": [
                    "La petición no debe interactuar con la base de datos, sólo debe usar un delay de 1 segundo"
                ],
                "conditions": [
                    "La petición no actuará directamente sobre lo base de datos, es decir, no actualizará realmente el recurso, sino que, al usar el endpoint con PUT, se procesará solamente en el servidor y tras un retraso de 1 regresará un objeto con el código de estado 200 y el nombre del campeón al que le “actualizó” la información.",
                    "El retraso con el que se enviará la respuesta de la petición debe hacerse con un método asíncrono para que no detenga el hilo de ejecución del servidor.",
                    "En caso de error, debe regresar un objeto con el código y mensaje de error.",
                    "La API debe permitir la petición desde un dominio y desde localhost.",
                    "El endpoint debe comenzar desde “api/champions/[nombre del campeón]”"
                ]
            },
            {
                "id": "HU04",
                "description": "Simular petición HTTP POST hacia la API",
                "tasks": [
                    {
                        "backlogId": "HU04",
                        "id": 21,
                        "description": "Creación de endpoint para recibir petición POST",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "HU04",
                        "id": 22,
                        "description": "Verificar funcionamiento de endpoint con Postman",
                        "inCharge": "Luis Lira"
                    }
                ],
                "comments": [
                    "La petición no debe interactuar con la base de datos, sólo debe usar un delay de 1 segundo"
                ],
                "conditions": [
                    "La petición no actuará directamente sobre lo base de datos, es decir, no creará realmente el recurso, sino que, al usar el endpoint con POST, se procesará solamente en el servidor y tras un retraso de 1 regresará un objeto con el código de estado 200 y el nombre del campeón al que fue creado.",
                    "El retraso con el que se enviará la respuesta de la petición debe hacerse con un método asíncrono para que no detenga el hilo de ejecución del servidor.",
                    "En caso de error, debe regresar un objeto con el código y mensaje de error.",
                    "La API debe permitir la petición desde un dominio y desde localhost.",
                    "El endpoint debe comenzar desde “api/champions/[nombre del campeón]”"
                ]
            },
            {
                "id": "HU05",
                "description": "Simular petición HTTP DELETE hacia la API",
                "tasks": [
                    {
                        "backlogId": "HU05",
                        "id": 23,
                        "description": "Creación de endpoint para recibir petición DELETE",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "HU05",
                        "id": 24,
                        "description": "Verificar funcionamiento de endpoint con Postman",
                        "inCharge": "Luis Lira"
                    }
                ],
                "comments": [
                    "La petición no debe interactuar con la base de datos, sólo debe usar un delay de 1 segundo"
                ],
                "conditions": [
                    "La petición no actuará directamente sobre lo base de datos, es decir, no eliminará realmente el recurso, sino que, al usar el endpoint con DELETE, se procesará solamente en el servidor y tras un retraso de 1 segundo regresará un objeto con el código de estado 200 y el nombre del campeón al que fue eliminado.",
                    "El retraso con el que se enviará la respuesta de la petición debe hacerse con un método asíncrono para que no detenga el hilo de ejecución del servidor.",
                    "En caso de error, debe regresar un objeto con el código y mensaje de error.",
                    "La API debe permitir la petición desde un dominio y desde localhost.",
                    "El endpoint debe comenzar desde “api/champions/[nombre del campeón]”"
                ]
            }
        ]
    },
    {
        "sprintId": 3,
        "content": [
            {
                "id": "D07",
                "description": "Creación de documentación de la API",
                "tasks": [
                    {
                        "backlogId": "D07",
                        "id": 25,
                        "description": "Redacción de los ejemplos y documentación para peticiones GET",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "D07",
                        "id": 26,
                        "description": "Redacción de los ejemplos y documentación para peticiones POST",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "D07",
                        "id": 27,
                        "description": "Redacción de los ejemplos y documentación para peticiones PUT",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "D07",
                        "id": 28,
                        "description": "Redacción de los ejemplos y documentación para peticiones DELETE",
                        "inCharge": "Luis Lira"
                    }
                ],
                "comments": [
                    "Se crearán los ejemplos de uso de la API para los usuarios.",
                    "Los ejemplos de uso deberán especificar cómo se realizará la petición a la API y con ejemplos de lo que devolverá en caso de éxito o de error."
                ],
                "conditions": []
            },
            {
                "id": "HU06",
                "description": "Simular petición HTTP DELETE hacia la API",
                "tasks": [
                    {
                        "backlogId": "HU06",
                        "id": 29,
                        "description": "Creación de Layout del sitio",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "HU06",
                        "id": 30,
                        "description": "Creación de barra de navegación",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "HU06",
                        "id": 31,
                        "description": "Creación de sección de bievenida",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "HU06",
                        "id": 32,
                        "description": "Creación de footer",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "HU06",
                        "id": 33,
                        "description": "Creación de barra de navegación",
                        "inCharge": "Luis Lira"
                    }
                ],
                "comments": [
                    "Se creará la página principal al entrar por la ruta “/” a la API."
                ],
                "conditions": [
                    "El sitio debe tener un estilo minimalista",
                    "El sitio debe tener una barra de navegación con la opción de ir a hacia la documentación",
                    "En la página principal del sitio debe haber un ejemplo de uso con el endpoint de la API"
                ]
            }
        ]
    },
    {
        "sprintId": 4,
        "content": [
            {
                "id": "D08",
                "description": "Llenado de BDD con toda la información recopilada de los campeones.",
                "tasks": [
                    {
                        "backlogId": "D08",
                        "id": 34,
                        "description": "Importación del json campeones.json a la instancia de la base de datos",
                        "inCharge": "Luis Lira"
                    }
                ],
                "comments": [
                    "Se cargará el archivo JSON con toda la información recopilada en la BDD.",
                    "Sólo se importará el archivo campeones.json a la base de datos y se confirmará que se haya creado correctamente."
                ],
                "conditions": []
            },
            {
                "id": "HU07",
                "description": "Creación de documentación de la API",
                "tasks": [
                    {
                        "backlogId": "HU07",
                        "id": 35,
                        "description": "Creación de página estática para la documentación",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "HU07",
                        "id": 36,
                        "description": "Creación de menú de navegación por la API",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "HU07",
                        "id": 37,
                        "description": "Creación de sección enfocado a las peticiones GET (All y filtros) y GET (One)",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "HU07",
                        "id": 38,
                        "description": "Ejemplos de respuestas de las peticiones GET",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "HU07",
                        "id": 39,
                        "description": "Creación de sección enfocado a las peticiones PUT",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "HU07",
                        "id": 40,
                        "description": "Ejemplos de respuestas de las peticiones PUT",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "HU07",
                        "id": 41,
                        "description": "Creación de sección enfocado a las peticiones POST",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "HU07",
                        "id": 42,
                        "description": "Ejemplos de respuestas de las peticiones POST",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "HU07",
                        "id": 43,
                        "description": "Creación de sección enfocado a las peticiones DELETE",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "HU07",
                        "id": 44,
                        "description": "Ejemplos de respuestas de las peticiones DELETE",
                        "inCharge": "Luis Lira"
                    }
                ],
                "comments": [
                    "Se creará una vista “/docs” para poner la documentación creada"
                ],
                "conditions": [
                    "La documentación debe de tener un ejemplo de cómo hacer las peticiones con al menos 3 lenguajes de programación.",
                    "Cada campo del objeto JSON que regresará deberá tener una pequeña descripción de qué es y de qué tipo de datos es el valor del campo.",
                    "La documentación debe estar organizada en el siguiente orden: GET All, GET One, POST, PUT, DELETE",
                    "Debe haber un menú lateral permita navegar entre la documentación"
                ]
            },
            {
                "id": "HU08",
                "description": "Recuadro para poder probar la API sin salir del sitio",
                "tasks": [
                    {
                        "backlogId": "HU08",
                        "id": 45,
                        "description": "Creación de formulario con los siguientes elementos: Input con dirección de la API, Input para ingresar nombre del campeón, Botón para realizar búqueda",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "HU08",
                        "id": 46,
                        "description": "Creación de script encargado de hacer fetch hacia la API",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "HU08",
                        "id": 47,
                        "description": "Creación de textarea donde se representará formateada la información devuelta por la API",
                        "inCharge": "Luis Lira"
                    }
                ],
                "comments": [
                    "Se agregará un formulario donde el usuario pueda probar la API para obtener todos o un solo campeón de la BDD."
                ],
                "conditions": [
                    "El recuadro para probar la API debe ser fácil de reconocer",
                    "El área del recuadro debe tener un input donde el usuario pueda poner de manera opcional el nombre de uno de los campeones",
                    "Debe haber un textarea donde se mostrará la respuesta que regresa la API",
                    "La respuesta de la API debe estar formateada en la estructura de un JSON para que sea más legible"
                ]
            },
            {
                "id": "D09",
                "description": "Despliegue de la aplicación",
                "tasks": [
                    {
                        "backlogId": "D09",
                        "id": 48,
                        "description": "Hacer commit de los último cambios y subirlos al repositorio en GtiHub",
                        "inCharge": "Luis Lira"
                    },
                    {
                        "backlogId": "D09",
                        "id": 48,
                        "description": "Despliegue de la aplicación en el hosting gratuito que se encontró",
                        "inCharge": "Luis Lira"
                    }
                ],
                "comments": [
                    "Se hará el despliegue de la aplicación y pruebas de funcionamiento en la plataforma que se seleccionó junto a la definición de tecnologías.",
                    "Las pruebas funcionamiento consistirán a hacer llamadas a la API desde postman, desde un navegador y desde el recuadro de prueba de la página."
                ],
                "conditions": []
            }
        ]
    }
]